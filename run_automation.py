#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Launcher Script para LinkedIn Automation
Script simples para iniciar a automa√ß√£o
"""

import os
import sys
import json
import subprocess
from datetime import datetime

def check_requirements():
    """Verifica se os requisitos est√£o instalados"""
    required_packages = ['requests', 'schedule']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå Pacotes Python necess√°rios n√£o encontrados:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüì¶ Instale com: pip install -r requirements.txt")
        return False
    
    return True

def check_config():
    """Verifica se o arquivo de configura√ß√£o existe e est√° v√°lido"""
    if not os.path.exists('config.json'):
        print("‚ùå Arquivo config.json n√£o encontrado")
        print("üìù Execute primeiro: python linkedin_token_helper.py")
        print("üìÑ Ou copie config_example.json para config.json e edite")
        return False
    
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        required_fields = ['linkedin_access_token', 'linkedin_person_id']
        for field in required_fields:
            if field not in config:
                print(f"‚ùå Campo '{field}' n√£o encontrado em config.json")
                return False
            
            if config[field] in ['SEU_ACCESS_TOKEN_AQUI', 'SEU_PERSON_ID_AQUI', '']:
                print(f"‚ùå Campo '{field}' precisa ser configurado em config.json")
                return False
        
        return True
        
    except json.JSONDecodeError:
        print("‚ùå Erro ao ler config.json - arquivo JSON inv√°lido")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar configura√ß√£o: {e}")
        return False

def show_menu():
    """Mostra menu de op√ß√µes"""
    print("ü§ñ LinkedIn Automation Launcher")
    print("=" * 40)
    print("1. üöÄ Iniciar automa√ß√£o")
    print("2. üîß Configurar token LinkedIn")
    print("3. üìä Testar conex√£o")
    print("4. üìã Verificar configura√ß√£o")
    print("5. üìñ Abrir documenta√ß√£o")
    print("6. ‚ùå Sair")
    print()

def test_connection():
    """Testa conex√£o com LinkedIn"""
    try:
        from linkedin_automation import LinkedInAutomation
        
        automation = LinkedInAutomation()
        success = automation.test_connection()
        
        if success:
            print("‚úÖ Conex√£o com LinkedIn OK!")
            
            # Mostrar estat√≠sticas se houver hist√≥rico
            stats = automation.get_stats()
            if stats['total_posts'] > 0:
                print(f"üìä Estat√≠sticas:")
                print(f"   Total de posts: {stats['total_posts']}")
                print(f"   Posts hoje: {stats['today_posts']}")
                print(f"   Taxa de sucesso: {stats['success_rate']:.1f}%")
        else:
            print("‚ùå Falha na conex√£o com LinkedIn")
            print("Verifique suas credenciais em config.json")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")

def show_config():
    """Mostra configura√ß√£o atual"""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("üìã Configura√ß√£o atual:")
        print(f"   Intervalo entre posts: {config.get('post_interval_minutes', 60)} minutos")
        print(f"   Delay aleat√≥rio: {config.get('random_delay_minutes', 0)} minutos")
        print(f"   M√°ximo posts/dia: {config.get('max_posts_per_day', 24)}")
        print(f"   Apenas hor√°rio comercial: {config.get('working_hours_only', False)}")
        
        if config.get('working_hours_only'):
            start = config.get('working_hours_start', 9)
            end = config.get('working_hours_end', 18)
            print(f"   Hor√°rio de trabalho: {start}h √†s {end}h")
        
        topics = config.get('topics', [])
        print(f"   T√≥picos: {', '.join(topics)}")
        
    except Exception as e:
        print(f"‚ùå Erro ao ler configura√ß√£o: {e}")

def open_documentation():
    """Abre documenta√ß√£o"""
    if os.path.exists('setup_guide.md'):
        print("üìñ Abrindo documenta√ß√£o...")
        
        # Tentar abrir com diferentes programas
        if sys.platform.startswith('win'):
            os.startfile('setup_guide.md')
        elif sys.platform.startswith('darwin'):  # macOS
            subprocess.run(['open', 'setup_guide.md'])
        else:  # Linux
            subprocess.run(['xdg-open', 'setup_guide.md'])
    else:
        print("‚ùå Arquivo setup_guide.md n√£o encontrado")

def run_automation():
    """Executa a automa√ß√£o"""
    print("üöÄ Iniciando automa√ß√£o LinkedIn...")
    print("=" * 40)
    
    try:
        from linkedin_automation import LinkedInAutomation
        
        automation = LinkedInAutomation()
        automation.start_automation()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao executar automa√ß√£o: {e}")

def configure_token():
    """Configura token LinkedIn"""
    print("üîß Configurando token LinkedIn...")
    
    try:
        import linkedin_token_helper
        linkedin_token_helper.main()
    except ImportError:
        print("‚ùå linkedin_token_helper.py n√£o encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao configurar token: {e}")

def main():
    """Fun√ß√£o principal"""
    while True:
        print(f"\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        show_menu()
        
        try:
            choice = input("Escolha uma op√ß√£o (1-6): ").strip()
            
            if choice == '1':
                if not check_requirements():
                    continue
                if not check_config():
                    continue
                run_automation()
                
            elif choice == '2':
                if not check_requirements():
                    continue
                configure_token()
                
            elif choice == '3':
                if not check_requirements():
                    continue
                if not check_config():
                    continue
                test_connection()
                
            elif choice == '4':
                if not check_config():
                    continue
                show_config()
                
            elif choice == '5':
                open_documentation()
                
            elif choice == '6':
                print("üëã At√© logo!")
                break
                
            else:
                print("‚ùå Op√ß√£o inv√°lida. Escolha entre 1-6.")
                
        except KeyboardInterrupt:
            print("\nüëã At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        
        input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    main()