#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LinkedIn Automation Tool for Cybersecurity Content
Criado para automatizar publica√ß√µes no LinkedIn sobre seguran√ßa da informa√ß√£o
"""

import json
import random
import time
import schedule
import logging
import os
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import List, Dict, Any
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('linkedin_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class LinkedInConfig:
    """Configura√ß√£o para LinkedIn API"""
    access_token: str
    person_id: str  # LinkedIn person URN
    
@dataclass
class ContentConfig:
    """Configura√ß√£o para gera√ß√£o de conte√∫do"""
    openai_api_key: str = ""
    topics: List[str] = None
    use_ai: bool = False

class ContentDatabase:
    """Banco de dados de conte√∫do sobre ciberseguran√ßa"""
    
    def __init__(self):
        self.security_topics = {
            "seguran√ßa_da_informa√ß√£o": [
                "üîê A seguran√ßa da informa√ß√£o √© fundamental no mundo digital atual. Proteger dados confidenciais n√£o √© apenas uma responsabilidade t√©cnica, mas um compromisso com a confian√ßa dos clientes. #Seguran√ßaDaInforma√ß√£o #DataProtection",
                "üõ°Ô∏è Implementar pol√≠ticas de seguran√ßa robustas √© como construir uma fortaleza digital. Cada camada de prote√ß√£o adiciona valor √† defesa contra amea√ßas cibern√©ticas. #CyberSecurity #InfoSec",
                "üìä A gest√£o de riscos em seguran√ßa da informa√ß√£o requer an√°lise cont√≠nua e adapta√ß√£o √†s novas amea√ßas. Estar preparado √© a melhor defesa. #RiskManagement #Security",
                "üîí A classifica√ß√£o adequada de dados √© o primeiro passo para uma estrat√©gia de seguran√ßa eficaz. Nem toda informa√ß√£o precisa do mesmo n√≠vel de prote√ß√£o. #DataClassification #InformationSecurity",
                "üåê Com o aumento do trabalho remoto, a seguran√ßa de endpoints tornou-se ainda mais cr√≠tica. Proteger cada dispositivo √© proteger toda a rede. #EndpointSecurity #RemoteWork"
            ],
            "forense_computacional": [
                "üîç A forense computacional √© a arte de encontrar evid√™ncias digitais onde outros veem apenas bits e bytes. Cada arquivo deletado conta uma hist√≥ria. #ForenseComputacional #DigitalForensics",
                "üíª Na investiga√ß√£o forense digital, a preserva√ß√£o da cadeia de cust√≥dia √© fundamental. Um erro pode invalidar toda a evid√™ncia coletada. #DigitalInvestigation #Forensics",
                "üïµÔ∏è A an√°lise de malware revela as t√©cnicas e motiva√ß√µes dos atacantes. Compreender o inimigo √© essencial para fortalecer nossas defesas. #MalwareAnalysis #ThreatIntelligence",
                "üì± Com dispositivos m√≥veis armazenando cada vez mais dados pessoais, a forense mobile tornou-se uma especialidade crucial. #MobileForensics #CyberInvestigation",
                "‚öñÔ∏è A forense computacional n√£o √© apenas t√©cnica, mas tamb√©m jur√≠dica. Entender as leis √© t√£o importante quanto dominar as ferramentas. #LegalTech #DigitalEvidence"
            ],
            "forense_digital": [
                "üî¨ A forense digital moderna combina t√©cnicas tradicionais com intelig√™ncia artificial para an√°lise mais eficiente de grandes volumes de dados. #DigitalForensics #AI",
                "üíæ A recupera√ß√£o de dados apagados √© uma das habilidades mais valiosas em forense digital. O que parece perdido pode ser crucial para o caso. #DataRecovery #Forensics",
                "üåä A forense em nuvem apresenta desafios √∫nicos: jurisdi√ß√£o, acesso aos dados e preserva√ß√£o de evid√™ncias em ambientes distribu√≠dos. #CloudForensics #CyberSecurity",
                "üîê A criptografia pode proteger dados, mas tamb√©m pode esconder evid√™ncias. A forense precisa equilibrar privacidade e justi√ßa. #Encryption #DigitalRights",
                "üì∏ A an√°lise de metadados pode revelar informa√ß√µes surpreendentes sobre arquivos digitais, desde localiza√ß√£o at√© equipamento usado. #Metadata #OSINT"
            ],
            "ciberseguran√ßa": [
                "üö® Os ataques cibern√©ticos evoluem constantemente. Nossa defesa deve ser igualmente din√¢mica e adapt√°vel. #CyberSecurity #ThreatDetection",
                "üîß Implementar Zero Trust n√£o √© apenas instalar ferramentas, √© mudar a mentalidade: 'nunca confie, sempre verifique'. #ZeroTrust #Security",
                "üåê A seguran√ßa em DevOps (DevSecOps) integra prote√ß√£o desde o desenvolvimento. Seguran√ßa n√£o pode ser uma reflex√£o tardia. #DevSecOps #SecureCode",
                "üìà O SOC (Security Operations Center) √© o cora√ß√£o da defesa cibern√©tica moderna. Monitoramento 24/7 faz toda a diferen√ßa. #SOC #CyberDefense",
                "üéØ Threat hunting √© a busca proativa por amea√ßas na rede. N√£o podemos apenas reagir, precisamos antecipar. #ThreatHunting #ProactiveSecurity"
            ],
            "golpes_digitais": [
                "‚ö†Ô∏è O phishing evoluiu: n√£o s√£o apenas emails suspeitos, mas mensagens sofisticadas que imitam perfeitamente empresas leg√≠timas. #Phishing #SocialEngineering",
                "üì± Golpes via WhatsApp e SMS aumentaram 300% no √∫ltimo ano. A educa√ß√£o do usu√°rio √© nossa melhor defesa. #SMSFraud #DigitalScams",
                "üí≥ O skimming digital permite roubo de dados de cart√£o sem contato f√≠sico. A tecnologia que facilita tamb√©m pode expor. #DigitalSkimming #FinancialSecurity",
                "üé≠ Deepfakes est√£o sendo usados em golpes de romance e fraudes empresariais. A realidade digital precisa ser questionada. #Deepfakes #SocialEngineering",
                "üè¶ Ataques a APIs banc√°rias cresceram exponentially. A seguran√ßa precisa acompanhar a inova√ß√£o financeira. #APIlSecurity #FinTech"
            ]
        }
        
        self.tips_security = [
            "üí° Dica de Seguran√ßa: Use autentica√ß√£o multifator sempre que poss√≠vel. √â um pequeno inconveniente que pode evitar grandes problemas.",
            "üîê Lembre-se: uma senha forte tem pelo menos 12 caracteres, mistura letras, n√∫meros e s√≠mbolos, e √© √∫nica para cada conta.",
            "üì≤ Mantenha seus aplicativos sempre atualizados. Patches de seguran√ßa s√£o sua primeira linha de defesa contra vulnerabilidades conhecidas.",
            "üîç Antes de clicar em links, verifique o remetente e a URL. Quando em d√∫vida, acesse o site diretamente pelo navegador.",
            "üíæ Backup regular dos dados importantes. O ransomware pode criptografar seus arquivos, mas n√£o pode apagar seus backups seguros."
        ]
        
        self.industry_insights = [
            "üìä O mercado de ciberseguran√ßa deve atingir $267 bilh√µes at√© 2026. A demanda por profissionais qualificados nunca foi t√£o alta.",
            "üéì Certifica√ß√µes como CISSP, CEH e CISA continuam sendo diferenciais importantes na carreira de seguran√ßa.",
            "üåç Regulamenta√ß√µes como LGPD no Brasil e GDPR na Europa mudaram como empresas lidam com dados pessoais.",
            "ü§ñ IA est√° revolucionando tanto ataques quanto defesas cibern√©ticas. √â uma corrida armamentista digital.",
            "‚òÅÔ∏è Migra√ß√£o para nuvem trouxe novos desafios de seguran√ßa. Responsabilidade compartilhada requer compreens√£o clara."
        ]

    def get_random_content(self, topic: str = None) -> str:
        """Obt√©m conte√∫do aleat√≥rio baseado no t√≥pico especificado"""
        if topic and topic in self.security_topics:
            return random.choice(self.security_topics[topic])
        
        # Se n√£o especificado, escolhe qualquer t√≥pico
        all_content = []
        for topic_content in self.security_topics.values():
            all_content.extend(topic_content)
        all_content.extend(self.tips_security)
        all_content.extend(self.industry_insights)
        
        return random.choice(all_content)

class LinkedInAutomation:
    """Classe principal para automa√ß√£o do LinkedIn"""
    
    def __init__(self, config_file: str = "config.json"):
        self.config = self._load_config(config_file)
        self.content_db = ContentDatabase()
        self.last_post_time = None
        self.post_history = []
        
        # Configurar sess√£o HTTP com retry
        self.session = requests.Session()
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
        
    def _load_config(self, config_file: str) -> Dict[str, Any]:
        """Carrega configura√ß√£o do arquivo JSON"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            required_fields = ['linkedin_access_token', 'linkedin_person_id']
            for field in required_fields:
                if field not in config:
                    raise ValueError(f"Campo obrigat√≥rio '{field}' n√£o encontrado na configura√ß√£o")
            
            return config
        except FileNotFoundError:
            logger.error(f"Arquivo de configura√ß√£o {config_file} n√£o encontrado")
            return self._create_default_config(config_file)
        except json.JSONDecodeError:
            logger.error(f"Erro ao decodificar JSON do arquivo {config_file}")
            raise
            
    def _create_default_config(self, config_file: str) -> Dict[str, Any]:
        """Cria arquivo de configura√ß√£o padr√£o"""
        default_config = {
            "linkedin_access_token": "SEU_ACCESS_TOKEN_AQUI",
            "linkedin_person_id": "SEU_PERSON_ID_AQUI",
            "post_interval_minutes": 60,
            "random_delay_minutes": 15,
            "topics": [
                "seguran√ßa_da_informa√ß√£o",
                "forense_computacional", 
                "forense_digital",
                "ciberseguran√ßa",
                "golpes_digitais"
            ],
            "openai_api_key": "",
            "use_ai_content": False,
            "max_posts_per_day": 24,
            "working_hours_only": False,
            "working_hours_start": 9,
            "working_hours_end": 18
        }
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
            
        logger.info(f"Arquivo de configura√ß√£o padr√£o criado: {config_file}")
        logger.info("Por favor, edite o arquivo com suas credenciais do LinkedIn")
        return default_config
    
    def _generate_ai_content(self, topic: str) -> str:
        """Gera conte√∫do usando OpenAI (se configurado)"""
        if not self.config.get('use_ai_content') or not self.config.get('openai_api_key'):
            return self.content_db.get_random_content(topic)
            
        try:
            # Aqui voc√™ integraria com OpenAI
            # Por enquanto, retorna conte√∫do do banco de dados
            logger.info("Gera√ß√£o de conte√∫do IA n√£o implementada, usando banco de dados local")
            return self.content_db.get_random_content(topic)
        except Exception as e:
            logger.error(f"Erro ao gerar conte√∫do IA: {e}")
            return self.content_db.get_random_content(topic)
    
    def create_post(self, content: str) -> bool:
        """Cria uma publica√ß√£o no LinkedIn"""
        if not content:
            logger.error("Conte√∫do vazio fornecido para publica√ß√£o")
            return False
            
        url = "https://api.linkedin.com/v2/ugcPosts"
        
        headers = {
            'Authorization': f'Bearer {self.config["linkedin_access_token"]}',
            'Content-Type': 'application/json',
            'X-Restli-Protocol-Version': '2.0.0'
        }
        
        post_data = {
            "author": self.config["linkedin_person_id"],
            "lifecycleState": "PUBLISHED",
            "specificContent": {
                "com.linkedin.ugc.ShareContent": {
                    "shareCommentary": {
                        "text": content
                    },
                    "shareMediaCategory": "NONE"
                }
            },
            "visibility": {
                "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
            }
        }
        
        try:
            response = self.session.post(url, headers=headers, json=post_data, timeout=30)
            
            if response.status_code == 201:
                logger.info("Publica√ß√£o criada com sucesso no LinkedIn!")
                self.last_post_time = datetime.now()
                self.post_history.append({
                    'timestamp': self.last_post_time.isoformat(),
                    'content': content[:100] + "..." if len(content) > 100 else content,
                    'status': 'success'
                })
                return True
            else:
                logger.error(f"Erro ao criar publica√ß√£o: {response.status_code} - {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Erro de conex√£o ao criar publica√ß√£o: {e}")
            return False
    
    def should_post_now(self) -> bool:
        """Verifica se deve postar agora baseado nas configura√ß√µes"""
        now = datetime.now()
        
        # Verificar hor√°rio de trabalho
        if self.config.get('working_hours_only', False):
            start_hour = self.config.get('working_hours_start', 9)
            end_hour = self.config.get('working_hours_end', 18)
            
            if now.hour < start_hour or now.hour >= end_hour:
                return False
                
        # Verificar limite di√°rio de posts
        today_posts = [p for p in self.post_history 
                      if datetime.fromisoformat(p['timestamp']).date() == now.date()]
        
        max_daily = self.config.get('max_posts_per_day', 24)
        if len(today_posts) >= max_daily:
            logger.info(f"Limite di√°rio de {max_daily} posts atingido")
            return False
            
        return True
    
    def run_single_post(self):
        """Executa uma √∫nica publica√ß√£o"""
        if not self.should_post_now():
            return
            
        try:
            # Escolher t√≥pico aleat√≥rio
            topics = self.config.get('topics', list(self.content_db.security_topics.keys()))
            topic = random.choice(topics)
            
            # Gerar conte√∫do
            content = self._generate_ai_content(topic)
            
            # Adicionar delay aleat√≥rio se configurado
            random_delay = self.config.get('random_delay_minutes', 0)
            if random_delay > 0:
                delay = random.randint(0, random_delay * 60)
                logger.info(f"Aguardando {delay} segundos antes de postar...")
                time.sleep(delay)
            
            # Criar publica√ß√£o
            success = self.create_post(content)
            
            if success:
                logger.info(f"Post sobre '{topic}' publicado com sucesso!")
            else:
                logger.error("Falha ao publicar post")
                
        except Exception as e:
            logger.error(f"Erro durante execu√ß√£o de post: {e}")
    
    def start_automation(self):
        """Inicia a automa√ß√£o com agendamento"""
        interval = self.config.get('post_interval_minutes', 60)
        
        # Agendar posts regulares
        schedule.every(interval).minutes.do(self.run_single_post)
        
        logger.info(f"Automa√ß√£o iniciada! Posts a cada {interval} minutos")
        logger.info("Pressione Ctrl+C para parar")
        
        # Executar um post inicial (opcional)
        if self.config.get('post_immediately', False):
            logger.info("Executando post inicial...")
            self.run_single_post()
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # Verifica a cada minuto
                
        except KeyboardInterrupt:
            logger.info("Automa√ß√£o interrompida pelo usu√°rio")
        except Exception as e:
            logger.error(f"Erro durante automa√ß√£o: {e}")
    
    def test_connection(self) -> bool:
        """Testa a conex√£o com a API do LinkedIn"""
        url = "https://api.linkedin.com/v2/me"
        headers = {
            'Authorization': f'Bearer {self.config["linkedin_access_token"]}',
        }
        
        try:
            response = self.session.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                user_data = response.json()
                logger.info(f"Conex√£o OK! Usu√°rio: {user_data.get('localizedFirstName', 'N/A')} {user_data.get('localizedLastName', 'N/A')}")
                return True
            else:
                logger.error(f"Erro de autentica√ß√£o: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"Erro ao testar conex√£o: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas da automa√ß√£o"""
        total_posts = len(self.post_history)
        today_posts = len([p for p in self.post_history 
                          if datetime.fromisoformat(p['timestamp']).date() == datetime.now().date()])
        
        successful_posts = len([p for p in self.post_history if p['status'] == 'success'])
        
        return {
            'total_posts': total_posts,
            'today_posts': today_posts,
            'successful_posts': successful_posts,
            'success_rate': (successful_posts / total_posts * 100) if total_posts > 0 else 0,
            'last_post': self.last_post_time.isoformat() if self.last_post_time else None
        }

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ LinkedIn Automation Tool - Ciberseguran√ßa")
    print("=" * 50)
    
    # Criar inst√¢ncia da automa√ß√£o
    automation = LinkedInAutomation()
    
    # Testar conex√£o
    print("Testando conex√£o com LinkedIn...")
    if not automation.test_connection():
        print("‚ùå Falha na conex√£o. Verifique suas credenciais no arquivo config.json")
        return
    
    print("‚úÖ Conex√£o estabelecida com sucesso!")
    
    # Mostrar configura√ß√µes
    interval = automation.config.get('post_interval_minutes', 60)
    topics = automation.config.get('topics', [])
    print(f"\nüìã Configura√ß√µes:")
    print(f"   Intervalo entre posts: {interval} minutos")
    print(f"   T√≥picos: {', '.join(topics)}")
    
    # Perguntar se deseja continuar
    response = input("\nüöÄ Iniciar automa√ß√£o? (s/n): ").lower().strip()
    if response in ['s', 'sim', 'y', 'yes']:
        automation.start_automation()
    else:
        print("Automa√ß√£o cancelada.")

if __name__ == "__main__":
    main()